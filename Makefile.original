# Makefile for PyLama Microservices

# Default values for environment variables
PORT ?= 8080
HOST ?= 127.0.0.1

# Port assignments for each service
PYBOX_PORT ?= 8000
PYLLM_PORT ?= 8001
SHELLAMA_PORT ?= 8002
PYLAMA_PORT ?= 8003
APILAMA_PORT ?= 8080
WEBLAMA_PORT ?= 80

.PHONY: all setup clean test lint format docker-build docker-up docker-down run-pybox run-pyllm run-pylama run-apilama run-shellama run-weblama run-all monitor help docker-test docker-test-pybox docker-test-pyllm docker-test-apilama docker-test-weblama docker-test-pylama docker-integration-test

# Default target
all: help

# Setup all projects
setup: setup-pybox setup-pyllm setup-pylama setup-apilama setup-shellama setup-weblama

# Setup individual projects with virtual environments
setup-pybox:
	@echo "Setting up PyBox..."
	cd pybox && python -m venv venv && . venv/bin/activate && pip install -e .

setup-pyllm:
	@echo "Setting up PyLLM..."
	cd pyllm && python -m venv venv && . venv/bin/activate && pip install -e .

setup-pylama:
	@echo "Setting up PyLama (Central Orchestration Service)..."
	cd pylama && python -m venv venv && . venv/bin/activate && pip install -e .

setup-apilama:
	@echo "Setting up APILama (API Gateway)..."
	cd apilama && python -m venv venv && . venv/bin/activate && pip install -e .

setup-shellama:
	@echo "Setting up SheLLama (Shell Operations)..."
	cd shellama && python -m venv venv && . venv/bin/activate && pip install -e .

setup-weblama:
	@echo "Setting up WebLama (Frontend)..."
	cd weblama && npm install

# Clean all projects
clean: clean-pybox clean-pyllm clean-pylama clean-apilama clean-shellama clean-weblama
	@echo "Cleaning up Docker resources..."
	docker-compose down -v
	@echo "Removing logs..."
	rm -f service_status.log

# Clean individual projects
clean-pybox:
	@echo "Cleaning PyBox..."
	find pybox -type d -name __pycache__ -exec rm -rf {} +
	find pybox -type d -name *.egg-info -exec rm -rf {} +
	find pybox -type d -name .pytest_cache -exec rm -rf {} +


clean-pyllm:
	@echo "Cleaning PyLLM..."
	find pyllm -type d -name __pycache__ -exec rm -rf {} +
	find pyllm -type d -name *.egg-info -exec rm -rf {} +
	find pyllm -type d -name .pytest_cache -exec rm -rf {} +

clean-pylama:
	@echo "Cleaning PyLama..."
	find pylama -type d -name __pycache__ -exec rm -rf {} +
	find pylama -type d -name *.egg-info -exec rm -rf {} +
	find pylama -type d -name .pytest_cache -exec rm -rf {} +

clean-weblama:
	@echo "Cleaning WebLama..."
	find weblama -type d -name __pycache__ -exec rm -rf {} +
	find weblama -type d -name *.egg-info -exec rm -rf {} +
	find weblama -type d -name .pytest_cache -exec rm -rf {} +

# Clean APILama
clean-apilama:
	@echo "Cleaning APILama..."
	find apilama -type d -name __pycache__ -exec rm -rf {} +
	find apilama -type d -name *.egg-info -exec rm -rf {} +
	find apilama -type d -name .pytest_cache -exec rm -rf {} +
	find apilama -type d -name venv -exec rm -rf {} +

# Clean SheLLama
clean-shellama:
	@echo "Cleaning SheLLama..."
	find shellama -type d -name __pycache__ -exec rm -rf {} +
	find shellama -type d -name *.egg-info -exec rm -rf {} +
	find shellama -type d -name .pytest_cache -exec rm -rf {} +
	find shellama -type d -name venv -exec rm -rf {} +

# Run tests for all projects
test: test-pybox test-pyllm test-pylama test-apilama test-shellama test-weblama

# Test individual projects
test-pybox:
	@echo "Testing PyBox..."
	cd pybox && python -m pytest tests/

test-pyllm:
	@echo "Testing PyLLM..."
	cd pyllm && python -m pytest tests/

test-pylama:
	@echo "Testing PyLama..."
	cd pylama && python -m pytest tests/

test-weblama:
	@echo "Testing WebLama..."
	cd weblama && python -m unittest discover

test-apilama:
	@echo "Testing APILama..."
	cd apilama && . venv/bin/activate && python -m unittest discover

test-shellama:
	@echo "Testing SheLLama..."
	cd shellama && . venv/bin/activate && python -m unittest discover

# Lint all projects
lint: lint-pybox lint-pyllm lint-pylama lint-apilama lint-shellama lint-weblama

# Lint individual projects
lint-pybox:
	@echo "Linting PyBox..."
	flake8 pybox

lint-pyllm:
	@echo "Linting PyLLM..."
	flake8 pyllm

lint-pylama:
	@echo "Linting PyLama..."
	flake8 pylama

lint-weblama:
	@echo "Linting WebLama..."
	flake8 weblama

# Format all projects
format: format-pybox format-pyllm format-pylama format-weblama

# Format individual projects
format-pybox:
	@echo "Formatting PyBox..."
	black pybox

format-pyllm:
	@echo "Formatting PyLLM..."
	black pyllm

format-pylama:
	@echo "Formatting PyLama..."
	black pylama

format-weblama:
	@echo "Formatting WebLama..."
	black weblama

# Docker commands
docker-build:
	@echo "Building Docker images..."
	docker-compose build

docker-up:
	@echo "Starting Docker containers..."
	docker-compose up -d

docker-down:
	@echo "Stopping Docker containers..."
	docker-compose down

# Docker testing commands
docker-test: docker-test-pybox docker-test-pyllm docker-test-apilama docker-test-weblama docker-test-pylama
	@echo "All Docker tests completed."

docker-test-pybox:
	@echo "Running PyBox tests in Docker..."
	cd pybox && make docker-test

docker-test-pyllm:
	@echo "Running PyLLM tests in Docker..."
	cd pyllm && make docker-test

docker-test-apilama:
	@echo "Running APILama tests in Docker..."
	cd apilama && make docker-test

docker-test-weblama:
	@echo "Running WebLama tests in Docker..."
	cd weblama && make docker-test

docker-test-pylama:
	@echo "Running PyLama tests in Docker..."
	cd pylama && make docker-test

docker-integration-test:
	@echo "Running integration tests across all components..."
	cd pylama && make docker-integration

# Run individual services
run-pybox:
	@echo "Running PyBox on port $(PYBOX_PORT)..."
	cd pybox && . venv/bin/activate && python -m pybox.app --port $(PYBOX_PORT) --host $(HOST)

run-pyllm:
	@echo "Running PyLLM on port $(PYLLM_PORT)..."
	cd pyllm && . venv/bin/activate && python -m pyllm.app --port $(PYLLM_PORT) --host $(HOST)

run-shellama:
	@echo "Running SheLLama on port $(SHELLAMA_PORT)..."
	cd shellama && . venv/bin/activate && python -m shellama.app --port $(SHELLAMA_PORT) --host $(HOST)

run-pylama:
	@echo "Running PyLama (Central Orchestration) on port $(PYLAMA_PORT)..."
	cd pylama && . venv/bin/activate && python -m pylama.app --port $(PYLAMA_PORT) --host $(HOST)

run-apilama:
	@echo "Running APILama (API Gateway) on port $(APILAMA_PORT)..."
	cd apilama && . venv/bin/activate && python -m apilama.app --port $(APILAMA_PORT) --host $(HOST)

run-weblama:
	@echo "Running WebLama (Frontend) on port $(WEBLAMA_PORT)..."
	cd weblama && npm start -- --port $(WEBLAMA_PORT)

# Run all services (in background)
run-all:
	@echo "Running all services in the correct order..."
	mkdir -p logs
	# Start services in the correct dependency order with PyLama as the central orchestration point
	@echo "Starting PyBox (Sandbox) on port $(PYBOX_PORT)..."
	cd pybox && . venv/bin/activate && python -m pybox.app --port $(PYBOX_PORT) --host $(HOST) > ../logs/pybox.log 2>&1 &
	@echo "Starting PyLLM (LLM Operations) on port $(PYLLM_PORT)..."
	cd pyllm && . venv/bin/activate && python -m pyllm.app --port $(PYLLM_PORT) --host $(HOST) > ../logs/pyllm.log 2>&1 &
	@echo "Starting SheLLama (Shell Operations) on port $(SHELLAMA_PORT)..."
	cd shellama && . venv/bin/activate && python -m shellama.app --port $(SHELLAMA_PORT) --host $(HOST) > ../logs/shellama.log 2>&1 &
	@echo "Starting APILama (API Gateway) on port $(APILAMA_PORT)..."
	cd apilama && . venv/bin/activate && python -m apilama.app --port $(APILAMA_PORT) --host $(HOST) > ../logs/apilama.log 2>&1 &
	@echo "Starting PyLama (Central Orchestration) on port $(PYLAMA_PORT)..."
	cd pylama && . venv/bin/activate && python -m pylama.app --port $(PYLAMA_PORT) --host $(HOST) > ../logs/pylama.log 2>&1 &
	@echo "Starting WebLama (Frontend) on port $(WEBLAMA_PORT)..."
	cd weblama && npm start -- --port $(WEBLAMA_PORT) > ../logs/weblama.log 2>&1 &
	@echo "All services started. Check logs directory for output."
	@echo "Access the web interface at http://localhost:$(WEBLAMA_PORT)"

# Run the monitoring script
monitor:
	@echo "Running monitoring script..."
	python monitor_services.py

# Deploy the system
deploy: docker-build docker-up
	@echo "System deployed and running. Run 'make monitor' to check status."

# Help
help:
	@echo "PyLama Microservices Makefile"
	@echo ""
	@echo "Available targets:"
	@echo "  setup       - Set up all projects"
	@echo "  clean       - Clean all projects"
	@echo "  test        - Run tests for all projects"
	@echo "  lint        - Lint all projects"
	@echo "  format      - Format all code with black"
	@echo ""
	@echo "Docker commands:"
	@echo "  docker-build - Build Docker images"
	@echo "  docker-up   - Start Docker containers (RECOMMENDED deployment method)"
	@echo "  docker-down - Stop Docker containers"
	@echo ""
	@echo "Docker testing commands:"
	@echo "  docker-test  - Run tests for all components in Docker"
	@echo "  docker-test-pybox   - Run PyBox tests in Docker"
	@echo "  docker-test-pyllm   - Run PyLLM tests in Docker"
	@echo "  docker-test-apilama - Run APILama tests in Docker"
	@echo "  docker-test-weblama - Run WebLama tests in Docker"
	@echo "  docker-test-pylama  - Run PyLama tests in Docker"
	@echo "  docker-integration-test - Run integration tests across all components"
	@echo ""
	@echo "Individual services (for development):"
	@echo "  run-pylama  - Run PyLama (Central Orchestration Service) on port $(PYLAMA_PORT)"
	@echo "  run-apilama - Run APILama (API Gateway) on port $(APILAMA_PORT)"
	@echo "  run-shellama - Run SheLLama (Shell Operations) on port $(SHELLAMA_PORT)"
	@echo "  run-pybox   - Run PyBox (Sandbox) on port $(PYBOX_PORT)"
	@echo "  run-pyllm   - Run PyLLM (LLM Operations) on port $(PYLLM_PORT)"
	@echo "  run-weblama - Run WebLama (Frontend) on port $(WEBLAMA_PORT)"
	@echo ""
	@echo "Combined operations:"
	@echo "  run-all     - Run all services in the correct order with PyLama as central point"
	@echo "  monitor     - Run the monitoring script to check service health"
	@echo "  deploy      - Deploy the entire system using Docker (recommended)"
	@echo "  help        - Show this help message"
	@echo ""
	@echo "Individual project targets are also available with -pybox, -pyllm, -pylama, -apilama, -shellama, or -weblama suffixes"
	@echo "Example: make setup-pybox"
